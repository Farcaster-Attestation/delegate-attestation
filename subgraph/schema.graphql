type Account @entity {
  id: ID!
  address: String!
  balance: BigInt!
  delegatedTo: Delegate
}

type Delegate @entity {
  id: ID!
  address: String!
  totalVotingPower: BigInt!
  directVotingPower: BigInt!
  subVotingPower: BigInt!
  proxyOf: String
  isProxy: Boolean!
  delegators: [Account]! @derivedFrom(field: "delegatedTo")
  subdelegators: [SubDelegator]! @derivedFrom(field: "to")
  subdelegatees: [SubDelegator]! @derivedFrom(field: "from")
}

type DelegateChanged @entity {
  id: ID!
  delegator: String! # address
  fromDelegate: String!
  toDelegate: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type DelegateVotesChanged @entity {
  id: ID!
  delegate: String!
  previousBalance: BigInt!
  newBalance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type Transfer @entity {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ProxyAddress @entity {
  id: ID!
  address: String!
  proxy: String!
}

type SubDelegationEntity @entity {
  id: ID!
  from: String!
  to: String!
  maxRedelegations: Int!
  blocksBeforeVoteCloses: Int!
  notValidBefore: BigInt!
  notValidAfter: BigInt!
  customRule: String!
  allowanceType: Int!
  allowance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type SubDelegator @entity {
  id: ID!
  from: Delegate
  to: Delegate
  maxRedelegations: Int!
  blocksBeforeVoteCloses: Int!
  notValidBefore: BigInt!
  notValidAfter: BigInt!
  customRule: String!
  allowanceType: Int!
  allowance: BigInt!
  votingPower: BigInt!
}

# aggregate types
type DailyDelagate @entity {
  id: ID!
  date: Int!
  delegate: String!
  directVotingPower: BigInt!
}

type DailyBalance @entity {
  id: ID!
  date: Int!
  account: String!
  balance: BigInt!
}

type DailySubDelegation @entity {
  id: ID!
  date: Int!
  from: String!
  to: String!
  maxRedelegations: Int!
  blocksBeforeVoteCloses: Int!
  notValidBefore: BigInt!
  notValidAfter: BigInt!
  customRule: String!
  allowanceType: Int!
  allowance: BigInt!
}

# subdelegation triggers
type SubDelegationTriggerContainer @entity {
  id: ID!
  triggers: [SubDelegationTrigger!] @derivedFrom(field: "container")
}

type SubDelegationTrigger @entity {
  id: ID!
  from: String!
  to: String!
  blockTimestamp: BigInt!
  container: SubDelegationTriggerContainer!
}
